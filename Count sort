#include <stdio.h>
 

void countSort(int arr[], int n) {
    int max = arr[0];
    int min = arr[0];

    // Find the maximum and minimum values in the array
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
        if (arr[i] < min) {
            min = arr[i];
        }
    }

    int range = max - min + 1;

    // Create a count array to store the count of each element
    int* count = (int*)malloc(range * sizeof(int));
    int* output = (int*)malloc(n * sizeof(int));

    // Initialize count array with zeros
    for (int i = 0; i < range; i++) {
        count[i] = 0;
    }

    // Store count of each element in the count array
    for (int i = 0; i < n; i++) {
        count[arr[i] - min]++;
    }

    // Modify the count array to store the position of each element in the output array
    for (int i = 1; i < range; i++) {
        count[i] += count[i - 1];
    }

    // Build the output array
    for (int i = n - 1; i >= 0; i--) {
        output[count[arr[i] - min] - 1] = arr[i];
        count[arr[i] - min]--;
    }

    // Copy the sorted elements back to the original array
    for (int i = 0; i < n; i++) {
        arr[i] = output[i];
    }

    free(count);
    free(output);
}

// A utility function to print an array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Driver program to test above functions
int main() {
    int arr[] = {4, 2, 2, 8, 3, 3, 1};
    int arr_size = sizeof(arr) / sizeof(arr[0]);

    printf("Given array is \n");
    printArray(arr, arr_size);

    countSort(arr, arr_size);

    printf("Sorted array is \n");
    printArray(arr, arr_size);

    return 0;
}
